# Nodus Syntax Key
#
# | FEATURE   | TOKEN | DESCRIPTION                          | EXAMPLE                  |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | REFERENCE | ~     | Reference a node in the module scope | ~models.MyModel          |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | --------- | @     | Reference a node in the global scope | @MyModule.models.MyModel |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | --------- | []    | Declare a reference is an array      | ~models.MyModel[]        |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | MODELS    | :>     | Specifies a many-to-one relationship | > MyModel                |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | --------- | :<     | Specifies a one-to-many relationhip  | < MyModel                |
# | --------- | ----- | ------------------------------------ | ------------------------ |
# | --------- | :-     | Specifies a one-to-one relationship  | - MyModel                |
# | --------- | ----- | ------------------------------------ | ------------------------ |

Inkage:
  description: Uber for skin-based ink application

  modules:
    AuthModule:
      description: Authenticate the humans and robots
      services:
        JWTService: NULL
      src:
        guards:
          JWTGuard: NULL

    Users:
      name: UsersService
      description: Does stuff to the users n that
      models:
        User:
          id:
            type: int
            pk: true
            increment: true
          name:
            type: varchar
            nullable: false
          tattoos: :< Tattoo.id
        Tattoo:
          name:
            type: varchar
            nullable: false
          user: :> User.id
      controllers:
        UsersController:
          path: users
          inject:
            usersService: ~services.UsersService
          actions:
            getUser:
              path: ':id'
              parameters:
                id: number
              output:
                type: ~models.User
                call:
                  target: usersService.findOne
                  arguments:
                    id: parameters.id
      services:
        UserRepository: NULL
        UsersService:
          inject:
            repo: UserRepository,
          methods:
            findOne:
              parameters:
                id: number
              output:
                type: ~models.User
                call:
                  target: repo.findOne
                  arguments:
                    id: parameters.id
